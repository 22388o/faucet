{"version":3,"sources":["settings/state.js","serviceWorker.js","types/component.js","components/FabricBridge.js","components/FabricTransactionList.js","components/FaucetDripForm.js","Home.js","App.js","index.js"],"names":["playnet","require","module","exports","host","port","secure","seed","status","balances","asset","symbol","confirmed","type","chains","name","tip","genesis","channels","keys","identity","id","key","nodes","orders","peers","alias","transactions","Boolean","window","location","hostname","match","FabricComponent","props","import","state","merge","integrity","actor","Actor","ec","EC","ref","React","createRef","this","dochash","start","console","log","setState","hash","Card","Content","children","constructor","Component","FabricBridge","settings","Object","assign","messages","meta","count","defaults","remote","Remote","message","_syncState","error","_state","connect","params","executeMethod","ping","fluid","Button","Group","floated","onClick","bind","Icon","Header","as","Feed","map","i","Event","size","style","fontSize","fontFamily","color","JSON","stringify","extra","Label","a","send","on","_handleRemoteReady","_handleRemoteMessage","_handleRemoteError","TransactionList","concat","className","Table","celled","Row","HeaderCell","Body","transaction","index","Cell","version","inputs","outputs","signature","FaucetDripForm","network","address","content","requests","secret","bitcoin","mainnet","regtest","testnet","e","current","target","value","networks","isValid","validateAddress","errors","fields","email","submittedName","submittedEmail","sync","Form","form","onSubmit","onChange","handleChange","Field","Input","action","placeholder","attached","icon","labelPosition","preimage","createHash","update","digest","toOutputScript","Home","bridge","data","method","then","result","Visibility","onBottomPassed","_handleMastheadBottomPassed","Segment","Container","marginTop","_handleBridgeChange","event","calculations","App","snapshots","path","exact","element","FabricTransactionList","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a887d42.chunk.js","sourcesContent":["'use strict';\n\n// TODO: evaluate why have to climb tree?\nconst playnet = require('../../node_modules/@fabric/core/settings/playnet');\n\nmodule.exports = {\n  host: '65.21.231.166',\n  port: 9999,\n  secure: false,\n  seed: null,\n  status: 'PAUSED',\n  balances: [\n    { asset: 'Bitcoin', symbol: 'BTC', confirmed: 0, type: 'confirmed' },\n    { asset: 'Liquid BTC (LBTC)', symbol: 'BTC', confirmed: 0, type: 'confirmed' },\n    { asset: 'Shyft', symbol: 'SHFT', confirmed: 0, type: 'confirmed' },\n    { asset: 'Bitcoin (testnet)', symbol: 'TBTC', confirmed: 0, type: 'confirmed' },\n    { asset: 'Bitcoin (regtest)', symbol: 'RBTC', confirmed: 0, type: 'confirmed' },\n    { asset: 'BTC A', symbol: 'BTCA', confirmed: 0, type: 'confirmed' },\n    { asset: 'BTC B', symbol: 'BTCB', confirmed: 0, type: 'confirmed' },\n    { asset: 'Lightning BTC', symbol: 'BTC', confirmed: 0.001, type: 'outbound' },\n    { asset: 'Lightning BTC', symbol: 'BTC', confirmed: 0.001, type: 'inbound' }\n  ],\n  chains: [\n    { name: 'Fabric (playnet)', asset: 'PFAB', tip: '???' },\n    { name: 'Bitcoin (mainnet)', asset: 'BTC', tip: '???', genesis: '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f' },\n    { name: 'Bitcoin (regtest)', asset: 'RBTC', tip: '???' },\n    { name: 'Bitcoin (testnet)', asset: 'TBTC', tip: '???' },\n    { name: 'BTC A (regtest)', asset: 'BTCA', tip: '???' },\n    { name: 'BTC B (regtest)', asset: 'BTCB', tip: '???' },\n    { name: 'Ethereum (Ropsten)', asset: 'ETHR', tip: '???' }\n  ],\n  channels: [],\n  keys: [],\n  identity: {\n    id: '',\n    seed: playnet.key.seed\n  },\n  nodes: [\n/**/'localhost:9977', // BTC   `                                              /**/\n/**/'localhost:9978', // BTCA   \\___                                          /**/\n/**/'localhost:9979', // BTCB   /    }- Together these are the first 3 chains /**/\\\n    'localhost:9980', // Liquid\n    'localhost:9981', // Shyft\n  ],\n  orders: [],\n  peers: [\n    { id: '???', alias: 'NUEVO', host: 'localhost', port: '7777', asset: 'BTC' }\n  ],\n  transactions: []\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// Defaults\nimport * as state from '../settings/state';\n\n// Dependencies\nimport * as EC from '../../node_modules/elliptic/lib/elliptic/ec';\nimport merge from 'lodash.merge';\nimport React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import * as d3 from 'd3';\n// import * as D3GraphViz from 'd3-graphviz';\n// import { Graphviz } from 'graphviz-react';\n\n// Components\n// import FabricStateMapper from '../StateMapper';\nimport * as Actor from '@fabric/core/types/actor';\nimport { Card } from 'semantic-ui-react';\n\nclass FabricComponent extends Component {\n  constructor (props) {\n    super(props);\n\n    if (props.import) {\n      this.state = merge({\n        integrity: null,\n        status: 'PAUSED'\n      }, state, props);\n    }\n\n    // Fabric Actor\n    this.actor = new Actor(this.state);\n    this.ec = new EC('secp256k1');\n\n    // React Element\n    this.ref = React.createRef();\n\n    return this;\n  }\n\n  get genesis () {\n    return (this.actor) ? this.actor.id : '00000000000000000000000000000000';\n  }\n\n  get dochash () {\n    return (this.actor) ? this.actor.id : '00000000000000000000000000000000';\n  }\n\n  get link () {\n    return `fabric:${this.dochash}`;\n  }\n\n  get integrity () {\n    return 'sha256-deadbeefbabe';\n  }\n\n  componentDidMount () {\n    this.start();\n    console.log('[FABRIC:COMPONENT]', 'Mounted:', this);\n  }\n\n  componentWillReceiveProps (props) {\n    this.setState({\n      hash: props.hash\n    });\n  }\n\n  render () {\n    const dot = 'graph{a--b}';;\n    return (\n      <>\n        <fabric-component ref={this.ref}>\n          <Card>\n            <Card.Content>\n              <fabric-graph>\n                <svg id='graph' />\n                {/* <Graphviz dot={dot} /> */}\n              </fabric-graph>\n            </Card.Content>\n            <Card.Content>{this.props.children}</Card.Content>\n          </Card>\n        </fabric-component>\n      </>\n    );\n  }\n\n  start () {\n    const actor = new Actor(this.state);\n    console.log('actor:', actor);\n    console.log('actor ID:', actor.id.constructor.name, actor.id);\n    this.setState({ hash: actor.id });\n\n    // this.setState({ status: 'STARTED' });\n    // d3.select('#graph').graphviz().renderDot('digraph {a -> b}');\n\n    return this;\n  }\n}\n\nexport default FabricComponent;\n\n// TODO: debug why this can't be used on this parent class...\n// ```\n// TypeError: Class extends value #<Object> is not a constructor or null\n// Module.<anonymous>\n// src/components/FabricIdentityManager.js:19\n//   16 | import IdentityPicker from './IdentityPicker';\n//   17 | import SeedEntryForm from './SeedEntryForm';\n//   18 | \n// > 19 | class FabricIdentityManager extends FabricComponent {\n//   20 |   constructor (props) {\n//   21 |     super(props);\n//   22 | \n// ```\n// export default connect(FabricStateMapper)(FabricComponent);\n//\n// ...\n// End of @fabric/core/types/component\n","// State\nimport * as defaults from '../settings/state';\n\n// Dependencies\nimport merge from 'lodash.merge';\nimport FabricComponent from '../types/component';\n\n// Components\nimport {\n  Button,\n  Card,\n  Feed,\n  Icon,\n  Label\n} from 'semantic-ui-react';\n\n// Fabric Types\n// import * as Store from '@fabric/core/types/store';\n// import * as Worker from '@fabric/core/types/worker';\nimport * as Remote from '@fabric/http/types/remote';\n\nclass FabricBridge extends FabricComponent {\n  constructor (props) {\n    super(props);\n\n    this.settings = Object.assign({\n      host: 'localhost',\n      port: 9999\n    }, props);\n\n    this.state = merge({\n      integrity: 'sha256-deadbeefbabe',\n      status: 'disconnected',\n      messages: [],\n      meta: {\n        messages: {\n          count: 0\n        }\n      }\n    }, defaults, props);\n\n    console.log('bridge settings:', this.settings);\n\n    this.remote = new Remote({\n      host: this.settings.host,\n      port: this.settings.port,\n      secure: this.settings.secure\n    });\n\n    /* this.agent = new Worker({\n      service: main,\n      settings: settings\n    }); */\n\n    return this;\n  }\n\n  _handleRemoteMessage (message) {\n    console.log('Remote message:', message);\n    this._syncState();\n  }\n\n  _handleRemoteError (error) {\n    console.log('Remote error:', error);\n  }\n\n  _syncState () {\n    this.setState({\n      status: this.remote._state.status,\n      messages: this.remote._state.messages,\n      meta: this.remote._state.meta\n    });\n  }\n\n  componentDidMount () {\n    console.log('bridge mounted! starting...');\n    // this.agent.executeMethod('connect');\n    // this.process.executeMethod('connect');\n    this.start();\n  }\n\n  connect () {\n    this._syncState();\n    this.remote.connect();\n    this._syncState();\n  }\n\n  executeMethod (name, params) {\n    return this.remote.executeMethod(name, params);\n  }\n\n  ping () {\n    this.remote.ping();\n  }\n\n  render () {\n    return (\n      <>\n        <Card fluid>\n          <Card.Content>\n            <Button.Group floated='right'>\n              <Button onClick={this.ping.bind(this)}>Ping <Icon name='info' /></Button>\n              <Button onClick={this.connect.bind(this)}>Connect <Icon name='lightning' /></Button>\n            </Button.Group>\n            <Card.Header as='h3'>Bridge</Card.Header>\n          </Card.Content>\n          <Card.Content>\n            <Feed>\n              {this.state.messages.map((message, i) => {\n                return (\n                  <Feed.Event size='small' key={i} style={{ fontSize: '0.8em', fontFamily: 'monospace' }}>\n                    <Feed.Content>\n                      <div style={{color: 'black'}}>{JSON.stringify(message, null, '  ')}</div>\n                    </Feed.Content>\n                  </Feed.Event>\n                );\n              })}\n            </Feed>\n          </Card.Content>\n          <Card.Content extra>\n            <Label><Icon name='info' /> {this.remote._state.status}</Label>\n            <Label><Icon name='mail' /> {this.remote._state.meta.messages.count}</Label>\n          </Card.Content>\n        </Card>\n      </>\n    );\n  }\n\n  async _handleRemoteReady () {\n    this._syncState();\n    console.log('Remote ready!');\n    const balances = await this.executeMethod('btc_getbalances');\n    console.log('balances:', balances);\n  }\n\n  async send (message) {\n    return this.remote.send(message);\n  }\n\n  async start () {\n    this.remote.on('ready', this._handleRemoteReady.bind(this));\n    this.remote.on('message', this._handleRemoteMessage.bind(this));\n    this.remote.on('error', this._handleRemoteError.bind(this));\n    this.connect();\n  }\n}\n\nexport default FabricBridge;\n","import FabricComponent from '../types/component';\n\n// Components\nimport {\n  Button,\n  // Card,\n  // Container,\n  Icon,\n  // Grid,\n  Header,\n  // Label,\n  // Menu,\n  // Segment,\n  Table,\n  Card\n} from 'semantic-ui-react';\n\nclass TransactionList extends FabricComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n      transactions: [],\n      integrity: 'sha256-deadbeefbabe'\n    };\n  }\n\n  _addKey (key) {\n    // TODO: merge proper\n    this.setState({ keys: this.state.keys.concat(key) });\n  }\n\n  render () {\n    return (\n      <>\n        <div className='ui vertical stripe segment'>\n          <div className='ui stackable grid container'>\n            <div className='row'>\n              <div className='column'>\n                <Card fluid>\n                  <Card.Content>\n                    <Header><h1><Icon name='tasks' /> Transactions</h1></Header>\n                    <Table celled>\n                      <Table.Header>\n                        <Table.Row>\n                          <Table.HeaderCell>ID</Table.HeaderCell>\n                          <Table.HeaderCell>Version</Table.HeaderCell>\n                          <Table.HeaderCell>Inputs</Table.HeaderCell>\n                          <Table.HeaderCell>Outputs</Table.HeaderCell>\n                          <Table.HeaderCell>Signature</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                      <Table.Body>\n                        {this.state.transactions.map((transaction, index) => {\n                          return (\n                            <Table.Row key={index}>\n                              <Table.Cell>{transaction.id}</Table.Cell>\n                              <Table.Cell>{transaction.version}</Table.Cell>\n                              <Table.Cell>{transaction.inputs}</Table.Cell>\n                              <Table.Cell>{transaction.outputs}</Table.Cell>\n                              <Table.Cell>{transaction.signature}</Table.Cell>\n                            </Table.Row>\n                          );\n                        })}\n                      </Table.Body>\n                      {/* <Table.Footer>\n                        <Table.Row>\n                          <Table.HeaderCell colSpan='3'>\n                            <Menu floated='right' pagination>\n                              <Menu.Item as='a' icon>\n                                <Icon name='chevron left' />\n                              </Menu.Item>\n                              <Menu.Item as='a'>1</Menu.Item>\n                              <Menu.Item as='a'>2</Menu.Item>\n                              <Menu.Item as='a'>3</Menu.Item>\n                              <Menu.Item as='a'>4</Menu.Item>\n                              <Menu.Item as='a' icon>\n                                <Icon name='chevron right' />\n                              </Menu.Item>\n                            </Menu>\n                          </Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Footer> */}\n                    </Table>\n                  </Card.Content>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TransactionList;\n","// Cryptography\nimport { createHash } from 'crypto';\n\n// Dependencies\nimport * as bitcoin from 'bitcoinjs-lib';\n\n// React\nimport merge from 'lodash.merge';\nimport React from 'react';\n// import { connect } from 'react-redux';\n// import FabricStateMapper from '../StateMapper';\n\n// Fabric Types\nimport FabricComponent from '../types/component';\n\n// Fabric Services\n// import Bitcoin from '@fabric/core/services/bitcoin';\n\n// Components\nimport {\n  Button,\n  // Container,\n  Dropdown,\n  Form,\n  // Grid,\n  Icon,\n  Input\n  // Menu,\n  // Segment\n} from 'semantic-ui-react';\n\n// Internals\n// import FabricKeyPair from './FabricKeyPair';\n\n// Fabric Types\nimport * as Actor from '@fabric/core/types/actor';\n// import * as Key from '@fabric/core/types/key';\n// import * as Signer from '@fabric/core/types/signer';\n\nclass FaucetDripForm extends FabricComponent {\n  constructor (props) {\n    super(props);\n\n    this.settings = merge({\n      network: 'regtest'\n    }, props);\n\n    /* this.wallet = new Wallet({\n      network: this.settings.network\n    }); */\n\n    // this.key = new Key(this.settings);\n    // this._key = new bcoin.hd.key();\n\n    // TODO: prepare Fabric\n    // i.e., use _state here, then import from getter and apply properties\n    // _from_ @react\n    this.state = merge({\n      address: null,\n      content: {\n        requests: []\n      },\n      requests: {},\n      secret: Actor.randomBytes(32) // solution hash (revealed on trade)\n    }, props);\n\n    // this.bitcoin = new Bitcoin(this.settings);\n    this.address = React.createRef();\n\n    return this;\n  }\n\n  get networks () {\n    return {\n      'mainnet': bitcoin.networks.mainnet,\n      'regtest': bitcoin.networks.regtest,\n      'testnet': bitcoin.networks.testnet\n    };\n  }\n\n  _handleAddressChange (e) {\n    console.log('address field:', this.address.current);\n\n    this.setState({ address: e.target.value });\n\n    console.log('state:', this.state);\n    console.log('value:', e.target.value);\n    console.log('network:', this.networks.regtest);\n    const isValid = this.validateAddress(e.target.value);\n    console.log('isValid:', isValid);\n\n    if (isValid) {\n\n    } else {\n      this.setState({\n        status: 'ERROR',\n        errors: [\n          'Invalid Bitcoin address.'\n        ]\n      });\n    }\n  }\n\n  _handleSecretChange (e) {\n    this.setState({ secret: e.target.value });\n  }\n\n  _handleSubmitButtonClick (e) {\n    console.log('submit button click:', e);\n  }\n\n  _handleChange (e) {\n    const fields = { ...this.state.fields, [e.target.name]: e.target.value };\n    // TODO: merge old state\n    this.setState({ fields: fields });\n  }\n\n  handleChange (e) {\n    this.setState({ address: e.target.value });\n  }\n\n  handleSubmit (e) {\n    console.log('submitting:', e);\n    const { name, email } = this.state;\n    this.setState({ submittedName: name, submittedEmail: email });\n  }\n\n  regenerate () {\n    this.setState({ secret: Actor.randomBytes(32) });\n    this.sync();\n  }\n\n  render () {\n    return (\n      <>\n        <Form ref={this.form} onSubmit={this.props.onSubmit.bind(this)} onChange={this.handleChange.bind(this)}>\n          <Form.Field>\n            <label>Request a deposit to...</label>\n            <div className='ui input'>\n              {/* <Input ref={this.address} action type='text' placeholder='Enter a Bitcoin address here' onKeyUp={this._handleAddressChange.bind(this)} /> */}\n              <Input ref={this.address} action type='text' placeholder='Enter a Bitcoin address here' />\n              <Button attached type='submit' color='green' content='Request' icon='right chevron' labelPosition='right' onClick={this.props.onSubmit.bind(this)} />\n            </div>\n          </Form.Field>\n        </Form>\n      </>\n    );\n  }\n\n  start () {\n    console.log('[FAUCET:DRIPS]', 'Starting component...');\n    super.start();\n    this.sync();\n    return this;\n  }\n\n  sync () {\n    const preimage = createHash('sha256').update(this.state.secret).digest('hex');\n    this.setState({ preimage: preimage });\n    return this;\n  }\n\n  validateAddress (address) {\n    try {\n      bitcoin.address.toOutputScript(address, this.networks[this.settings.network]);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n// export default PortalOrderForm;\nexport default FaucetDripForm;\n","// Dependencies\nimport React from 'react';\nimport {\n  Link\n} from 'react-router-dom';\n\n// Components\nimport {\n  Card,\n  Container,\n  Divider,\n  Icon,\n  // Grid,\n  // Menu,\n  Segment,\n  Visibility\n} from 'semantic-ui-react';\n\nimport FabricComponent from './types/component';\n\nimport FabricBridge from './components/FabricBridge';\n// import FabricDebugger from './components/FabricDebugger';\n\nimport FaucetDripForm from './components/FaucetDripForm';\n// import FabricIdentityManager from './components/FabricIdentityManager';\n// import PortalMenu from './components/PortalMenu';\n\nclass Home extends FabricComponent {\n  constructor (props) {\n    super(props);\n\n    // TODO: prepare Fabric\n    // i.e., use _state here, then import from getter and apply properties\n    // _from_ @react\n    this.state = Object.assign({\n      host: 'localhost',\n      integrity: 'sha256-deadbeefbabe'\n    }, props);\n\n    this.bridge = React.createRef();\n    this.form = React.createRef();\n\n    return;\n  }\n\n  onSubmit (e) {\n    const message = {\n      type: 'Call',\n      data: {\n        method: 'DripRequest',\n        params: [ this.form.current.state.address ]\n      }\n    };\n\n    console.log('Message to send over bridge:', message);\n\n    this.bridge.current.send(message).then((result) => {\n      console.log('Message sent over bridge, result:', result);\n    });\n  }\n\n  render () {\n    return (\n      <>\n        <fabric-bridge-home ref={this.ref}>\n          <Visibility onBottomPassed={this._handleMastheadBottomPassed.bind(this)}>\n            <Segment className='ui inverted vertical masthead center aligned segment'>\n              <Container className='ui text container'>\n                <h1 className='ui inverted header'><Icon name='tint' /> bitfaucet</h1>\n                <h2>The official <code>@fabric/playnet</code> faucet.</h2>\n                <Container className='left aligned' style={{ marginTop: '5em' }}>\n                  <Card fluid>\n                    <Card.Content>\n                      <FaucetDripForm ref={this.form} onSubmit={this.onSubmit.bind(this)} />\n                    </Card.Content>\n                  </Card>\n                  <Card fluid>\n                    <Card.Content>\n                      <FabricBridge ref={this.bridge} host={this.state.host} onChange={this._handleBridgeChange.bind(this)} state={this.state} />\n                    </Card.Content>\n                  </Card>\n                </Container>\n              </Container>\n            </Segment>\n          </Visibility>\n        </fabric-bridge-home>\n      </>\n    );\n  }\n\n  _handleBridgeChange (event) {\n    console.log('bridge change:', event);\n  }\n\n  _handleMastheadBottomPassed (e, { calculations }) {\n    console.log('vis change:', e, calculations);\n    this.setState({ calculations });\n  }\n}\n\nexport default Home;\n","// Dependencies\nimport * as state from './settings/state';\nimport * as merge from 'lodash.merge';\n\n// React\nimport React from 'react';\n// import { Provider } from 'react-redux';\n// import { createStore } from 'redux';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes\n} from 'react-router-dom';\n// import * as Fabric from '@fabric/core';\n\n// Stylesheets\nimport './App.css';\nimport './semantic.css';\nimport './index.css';\n\n// Components\n/* import {\n  Container,\n  Divider,\n  Grid,\n  Icon,\n  Menu,\n  Segment,\n  Sidebar,\n  // Visibility\n} from 'semantic-ui-react'; */\n\n// Fabric Types\nimport Actor from '@fabric/core/types/actor';\nimport FabricComponent from './types/component';\n\n// Fabric Components\nimport FabricBridge from './components/FabricBridge';\nimport FabricDebugger from './components/FabricDebugger';\n// import FabricIdentityManager from './components/FabricIdentityManager';\n// import FabricNodeList from './components/FabricNodeList';\nimport FabricTransactionList from './components/FabricTransactionList';\n\n// Portal\nimport Home from './Home';\n\n/**\n * The Portal web application.\n */\nclass App extends FabricComponent {\n  constructor (settings) {\n    super(settings);\n\n    this.settings = merge({}, state, settings);\n\n    // this.fabric = new Fabric();\n    this.state = merge({\n      actor: null,\n      host: 'localhost',\n      integrity: null,\n      snapshots: []\n    }, state, settings);\n\n    return this;\n  }\n\n  _handleBridgeChange (event) {\n    console.log('bridge change:', event);\n  }\n\n  componentDidMount () {\n    const proof = new Actor(this.state);\n    return this;\n  }\n\n  render () {\n    return (\n      <react-application id='root'>\n        <Router>\n          <div className='pusher'>\n            <Routes>\n              <Route path='/' exact element={<Home state={this.state} balances={this.state.balances} keys={this.state.keys} host={this.state.host} />} />\n              <Route path='/transactions' element={<FabricTransactionList state={this.state} balances={this.state.balances} keys={this.state.keys} />} />\n            </Routes>\n            {/*\n            <Segment className='ui inverted vertical footer segment'>\n              <Container className='ui container'>\n                <FabricDebugger />\n                <Divider />\n                <FabricBridge onChange={this._handleBridgeChange.bind(this)} port={this.settings.port} />\n              </Container>\n            </Segment>\n            */}\n          </div>\n        </Router>\n      </react-application>\n    );\n  }\n}\n\nexport default App;\n","/**\n * Copyright: 2019, Fabric Labs\n */\n\n// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux\n// import { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n// import createSagaMiddleware from 'redux-saga';\n\n// Assets\nimport * as state from './settings/state';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n// Components\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// Functions\n// import sendToAnalytics from './functions/sendToAnalytics';\n\n// State\nimport * as initialState from './settings/state';\n\nfunction reducer (state = initialState, action = { type: 'UNDEFINED_ACTION' }) {\n  switch (action.type) {\n    case 'SEED_ADDED':\n      return {\n        seed: state.seed\n      };\n    case 'RESET':\n      return {\n        status: 'RESET'\n      };\n    default:\n      return state;\n  }\n}\n\n// const sagas = createSagaMiddleware();\n// const store = createStore(reducer, applyMiddleware(sagas));\n\n// sagas.run(RPCRequest);\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n    {/* <Provider> */}\n      <App state={state} host={state.host} />\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// TODO: enable Service Worker by disabling the line below, then test Fabric's\n// cache and the `@fabric/core/types/store` class — latest should be completely\n// isomorphic, so we're almost fully able to run in the browser now!\nserviceWorker.unregister();\n\n// reportWebVitals(sendToAnalytics);\n"],"sourceRoot":""}